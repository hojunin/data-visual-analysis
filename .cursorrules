# Instructions

During you interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again. 

You should also use the `.cursorrules` file as a scratchpad to organize your thoughts. Especially when you receive a new task, you should first review the content of the scratchpad, clear old different task if necessary, first explain the task, and plan the steps you need to take to complete the task. You can use todo markers to indicate the progress, e.g.
[X] Task 1
[ ] Task 2

Also update the progress of the task in the Scratchpad when you finish a subtask.
Especially when you finished a milestone, it will help to improve your depth of task accomplishment to use the scratchpad to reflect and plan.
The goal is to help you maintain a big picture as well as the progress of the task. Always refer to the Scratchpad when you plan the next step.

# Lessons

## User Specified Lessons

- You have a python venv in ./venv. Use it.
- Include info useful for debugging in the program output.
- Read the file before you try to edit it.
- Due to Cursor's limit, when you use `git` and `gh` and need to submit a multiline commit message, first write the message in a file, and then use `git commit -F <filename>` or similar command to commit. And then remove the file. Include "[Cursor] " in the commit message and PR title.

## Cursor learned

- For search results, ensure proper handling of different character encodings (UTF-8) for international queries
- Add debug information to stderr while keeping the main output clean in stdout for better pipeline integration
- When using seaborn styles in matplotlib, use 'seaborn-v0_8' instead of 'seaborn' as the style name due to recent seaborn version changes
- Use 'gpt-4o' as the model name for OpenAI's GPT-4 with vision capabilities
- 항상 한국어로 응답
- TypeScript 문제 해결 시 "any"나 타입 단언 사용 금지. 불가피한 경우 상세 설명 필요
- 댓글은 // NOTE: // FIXME: // TODO 3가지 유형 사용
- 패키지 매니저는 항상 pnpm 사용
- Streamlit slider 중복 ID 방지: 모든 slider에 고유한 key 파라미터 필요 (특히 공통 함수나 여러 페이지에서 사용되는 경우)

# Scratchpad

## 현재 작업: 데이터 시각화 그래프 프로젝트 고급 기능 확장 완료

### 작업 설명
기존에 구현된 7개 페이지의 데이터 시각화 프로젝트에 3개의 고급 분석 페이지를 추가로 구현하여 총 10개 페이지의 종합 데이터 분석 플랫폼으로 확장.

### 현재 프로젝트 상태 확인
✅ 모든 페이지 파일 존재 확인 완료 (총 10개):
- 1_기본_분석.py (43줄)
- 2_그래프_비교.py (81줄)  
- 3_그래프_겹치기.py (152줄)
- 4_고급_분석.py (320줄)
- 5_대시보드.py (341줄)
- 6_데이터_전처리.py (472줄)
- 7_회귀분석.py (771줄)
- 8_머신러닝_모델_평가.py (새로 추가, ~550줄)
- 9_시계열_분석.py (새로 추가, ~650줄)
- 10_클러스터링_분석.py (새로 추가, ~600줄)

✅ 지원 파일들:
- utils.py (314줄) - 테마 및 차트 다운로드 기능
- requirements.txt - 모든 필수 라이브러리 포함 (scikit-learn 포함)
- streamlit_app.py - 메인 앱 파일

### 새로 추가된 고급 기능들

8. **머신러닝 모델 평가 (8_머신러닝_모델_평가.py)**
   - 8가지 ML 모델 지원 (Linear, Ridge, Lasso, RF, GB, SVM, DT, KNN)
   - 회귀/분류 자동 감지 및 전환
   - 교차검증 및 성능 지표 (R², MSE, Accuracy, F1-Score 등)
   - 학습 곡선 분석
   - 예측 vs 실제값 비교
   - ROC 곡선 및 혼동 행렬 (분류)
   - 모델별 상세 성능 리포트

9. **시계열 분석 (9_시계열_분석.py)**
   - 시계열 분해 (트렌드, 계절성, 잔차)
   - 정상성 검정 (ADF, KPSS)
   - 차분을 통한 정상화
   - ACF/PACF 자기상관 분석
   - ARIMA 모델 예측
   - 지수평활법
   - 단순 이동평균
   - 샘플 시계열 데이터 생성

10. **클러스터링 분석 (10_클러스터링_분석.py)**
    - 4가지 클러스터링 알고리즘 (K-Means, DBSCAN, GMM, Agglomerative)
    - 차원 축소 (PCA, t-SNE)
    - 최적 클러스터 수 분석 (엘보우 방법, 실루엣 점수)
    - 클러스터별 특성 분석 및 히트맵
    - 클러스터 크기 분포 분석
    - 클러스터별 상세 통계
    - 결과 CSV 내보내기

### 다음 단계
[X] 새로운 3개 페이지 구현 완료
[X] 앱 실행하여 정상 작동 확인
[X] Import 오류 해결 (add_dark_mode_toggle 함수 제거)
[X] 기본 라이트 모드 테마 적용
[X] Streamlit slider 중복 ID 오류 해결 (모든 페이지 + utils.py)
[X] 클러스터링 분석 업로드 파일 문제 해결 (디버깅 정보 추가)
[X] 머신러닝 모델 평가 업로드 파일 문제 해결 (샘플 데이터 생성 함수 추가)
[ ] 전체 기능 테스트 및 최종 검증
[ ] 사용자 매뉴얼 작성 (선택사항)

### 구현 완료된 기능들 (총 10개 페이지)
1. **기본 분석** - 기본적인 데이터 시각화
2. **그래프 비교** - 여러 그래프 비교 분석
3. **그래프 겹치기** - 두 그래프 오버레이 기능
4. **고급 분석** - 통계 분석, 상관관계, 회귀분석
5. **대시보드** - 종합 대시보드 및 인사이트
6. **데이터 전처리** - 데이터 정제 및 변환
7. **회귀분석** - 전문 회귀분석 도구
8. **머신러닝 모델 평가** - ML 모델 성능 비교 및 평가
9. **시계열 분석** - 시간에 따른 데이터 패턴 분석
10. **클러스터링 분석** - 데이터 군집화 및 패턴 발견

### 공통 기능
✅ **테마 시스템** - 깔끔한 화이트/그레이 테마
✅ **차트 내보내기** - PNG, SVG, HTML 형식 지원
✅ **고해상도 이미지** - 해상도 및 크기 커스터마이징
✅ **한국어 인터페이스** - 모든 페이지 한국어 지원
✅ **샘플 데이터 지원** - 각 페이지별 테스트 데이터 제공

### 기술 스택
- **Frontend**: Streamlit
- **데이터 처리**: Pandas, NumPy
- **시각화**: Plotly (interactive charts)
- **통계 분석**: SciPy, Statsmodels
- **머신러닝**: Scikit-learn
- **이미지 내보내기**: Kaleido

### 최종 구현 결과
✅ 총 10개 페이지로 구성된 종합 데이터 분석 플랫폼
✅ 기초부터 고급까지 다양한 분석 기능
✅ 사용자 친화적인 한국어 인터페이스
✅ 전문적인 차트 내보내기 기능
✅ 확장 가능한 모듈식 구조

### 사용 가능한 분석 유형
- 기본 데이터 시각화 및 탐색
- 통계 분석 및 가설 검정
- 머신러닝 모델 개발 및 평가
- 시계열 데이터 분석 및 예측
- 클러스터링을 통한 패턴 발견
- 데이터 전처리 및 변환
- 회귀분석 및 예측 모델링 